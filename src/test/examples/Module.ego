module Test

import {
  Props { A }
  std::annotations::InstanceOf as InstanceOf
}

[InstanceOf]
public class B<Interfaces::Hash K,V> is A<V>, C<K> {
  private own const i32& x;
  public () {
    super(10)
    x: new i32(42)
  }

  static u32 Prop: 100 {
    get => field
    set {
      print("prop set")
      field: value
    }
  }

  async hello() {
    print("Hello ${B<K,V>::Prop::field}\n")
  }

  i32 main(List<?> args) {
    await hello()
    this.hello()
    this->hello()
    (@this).hello()
    while (string a = await fetch()) {
      println(a)
    }
    => 0
  }

  virtual ~ {
    delete x
    print("~B")
  }
}
